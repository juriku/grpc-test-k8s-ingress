apiVersion: v1
kind: Service
metadata:
  name: podlifecycle
  labels:
    app: podlifecycle
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      name: grpc-server
  selector:
    app: podlifecycle
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: podlifecycle
  name: podlifecycle
spec:
  replicas: 1
  selector:
    matchLabels:
      app: podlifecycle
  strategy:
    rollingUpdate:
      # This should be set to 0 if we only have 1 replica defined
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: podlifecycle
        version: "1"
    spec:
      containers:
        - image: jwenz723/podlifecycle
          livenessProbe:
            exec:
              command:
                # /usr/bin/local/grpc-health-probe  must be compiled into the image for this command to work
                - /usr/bin/local/grpc-health-probe
                - -addr=localhost:8080
            initialDelaySeconds: 30
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 10 # this is 3 times the period on readinessProbe
          readinessProbe:
            exec:
              command:
                - /usr/bin/local/grpc-health-probe
                - -addr=localhost:8080
            initialDelaySeconds: 5
            failureThreshold: 3
            successThreshold: 1
            periodSeconds: 3
          name: podlifecycle
          ports:
            - containerPort: 8080
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sleep
                  - "20"
      # This should be greater than the average amount of time it takes to serve a request to completion
      # This is the max duration that Kubernetes will wait before sending a SIGKILL. In most cases the
      # application will shutdown faster than this period, and therefore, the pod will terminate itself cleanly
      # before the terminationGracePeriodSeconds is hit.
      terminationGracePeriodSeconds: 180
